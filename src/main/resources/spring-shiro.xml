<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context = "http://www.springframework.org/schema/context"
  xmlns:mvc = "http://www.springframework.org/schema/mvc"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
  http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

  <context:property-placeholder location="classpath:app.properties"/>
  <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
    <property name="securityManager" ref="securityManager"/>
    <property name="filters">
      <map>
        <entry key="authc" value-ref="zxFormAuthenticationFilter"/>
      </map>
    </property>
    <property name="unauthorizedUrl" value="/refuse.jsp"/>
    <!-- override these for application-specific URLs if you like:
    <property name="loginUrl" value="/login.jsp"/>
    <property name="successUrl" value="/home.jsp"/>
    <property name="unauthorizedUrl" value="/unauthorized.jsp"/> -->
    <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
    <!-- defined will be automatically acquired and available via its beanName in chain        -->
    <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
    <!-- <property name="filters">
        <util:map>
            <entry key="anAlias" value-ref="someFilter"/>
        </util:map>
    </property> -->
    <property name="filterChainDefinitions">
      <value>
        <!--/admin/** = authc, roles[admin]-->
        <!--/docs/** = authc, perms[document:read]-->
        /** = authc
        <!--/login = anon-->
        <!--/index.jsp = anon-->
      </value>
    </property>
  </bean>

  <!-- Define any javax.servlet.Filter beans you want anywhere in this application context.   -->
  <!-- They will automatically be acquired by the 'shiroFilter' bean above and made available -->
  <!-- to the 'filterChainDefinitions' property.  Or you can manually/explicitly add them     -->
  <!-- to the shiroFilter's 'filters' Map if desired. See its JavaDoc for more details.       -->

  <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
    <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
    <property name="sessionManager" ref="webSessionManager"/>
    <property name="realms">
      <list>
        <ref bean="zxAuthorizingRealm"></ref>
      </list>
    </property>
    <!-- By default the servlet container sessions will be used.  Uncomment this line
         to use shiro's native sessions (see the JavaDoc for more): -->
    <!-- <property name="sessionMode" value="native"/> -->
  </bean>
  <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

  <!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->
  <!-- security datasource: -->
  <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>
  <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
    <property name="securityManager" ref="securityManager"/>
  </bean>

  <bean id="zxAuthorizingRealm" class="org.zx.learn.shiro.realm.ZxAuthorizingRealm">
  </bean>

  <bean id="zxFormAuthenticationFilter" class="org.zx.learn.shiro.filter.ZxFormAuthenticationFilter">
    <property name="loginUrl" value="/login" />
    <property name="successUrl" value="/admin/admin.jsp"/>
    <property name="usernameParam" value="username"/>
    <property name="passwordParam" value="password"/>
  </bean>

  <bean id="zxSessionManager" class="org.zx.learn.shiro.ZxSessionManager">
    <property name="expire" value="${sessionTimeout}"/>
  </bean>

  <bean id="webSessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
    <property name="sessionDAO" ref="zxSessionManager"/>
    <property name="sessionValidationSchedulerEnabled" value="true"/>
    <property name="deleteInvalidSessions" value="true"/>
    <property name="globalSessionTimeout" value="${sessionTimeout}"/>
  </bean>

</beans>